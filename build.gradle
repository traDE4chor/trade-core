group 'de.unistuttgart.iaas.trade'
version '1.0-SNAPSHOT'

apply plugin: 'java'
apply plugin: 'java-library-distribution'

version = '0.0.1'

sourceCompatibility = 1.8

repositories {
    jcenter()
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'
    integrationTestCompile group: 'commons-io', name: 'commons-io', version: '2.5'
    integrationTestCompile project(path: ':utils', configuration: 'testOutput')

    compile project(':models'), project(':persistence'), project(':utils'), project(':server')
}

// Summarized configurations, dependencies which are required in common by all sub projects
subprojects {
    apply plugin: 'java'

    repositories {
        jcenter()
        mavenCentral()
    }

    configurations.all {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }

    dependencies {
        compile group: 'de.slub-dresden', name: 'urnlib', version: '1.1.0'

        // Logging dependencies using slf4j API and Logback
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
        compile group: 'ch.qos.logback', name: 'logback-core', version: '1.1.7'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'

        testCompile group: 'junit', name: 'junit', version: '4.11'
    }

    group 'de.unistuttgart.iaas.trade'
    version '1.0-SNAPSHOT'
    sourceCompatibility = 1.8
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath
    // By default gradle skips tasks whose inputs and outputs are up to date.
    // Uncomment the following line to enforce the execution of the integration test whenever the corresponding task
    // is triggered no matter if something has changed or not.
    // outputs.upToDateWhen { false }
}

// Include the integration tests into the build process. Uncomment the following two lines if you prefer to trigger
// the integration tests only manually and not for each build.
// check.dependsOn integrationTest
// integrationTest.mustRunAfter test

// Ensure that distinct HTML reports for different types of tests are created
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

// Package root and all subprojects into a single JAR
//subprojects.each { subproject -> evaluationDependsOn(subproject.path)}
//
//jar.dependsOn subprojects.tasks['classes']
//jar {
//    baseName = 'traDE-core'
//    manifest {
//        attributes 'Main-Class': 'org.trade.core.TraDENode'
//    }
//    subprojects.each { subproject ->
//        from subproject.sourceSets.main.output.classesDir
//        from subproject.sourceSets.main.output.resourcesDir
//    }
//}

//create a single Jar with all dependencies
//task fatJar(type: Jar) {
//    manifest {
//        attributes 'Implementation-Title': 'TraDE Middleware',
//                'Implementation-Version': version,
//                'Main-Class': 'org.trade.core.TraDENode'
//    }
//    baseName = 'traDE-all'
//    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
//    with jar
//}

// Create a deployment archive
//task buildZip(type: Zip) {
//    from jar
//    from processResources
//    into('lib') {
//        from configurations.runtime
//    }
//}

// Task "distZip" added by plugin "java-library-distribution":
distZip.shouldRunAfter(build)

jar {
    // Keep jar clean:
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'

    manifest {
        attributes 'Main-Class': 'org.trade.core.TraDENode',
                'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' ')
    }
    // How-to add class path:
    //     http://stackoverflow.com/questions/22659463/add-classpath-in-manifest-using-gradle
    //     https://gist.github.com/simon04/6865179
}