group 'de.unistuttgart.iaas.trade'
version '1.0-SNAPSHOT'

apply plugin: 'application'
apply plugin: 'war'

sourceCompatibility = 1.8

mainClassName = 'org.trade.core.TraDENode'
applicationName = 'traDE'

// To set up required JVM options uncomment the following line and add required options. These options will then be
// present in the generated start scripts.
//applicationDefaultJvmArgs = ["-Xms4g -Xmx8g ..."]

repositories {
    jcenter()
    mavenCentral()
}

sourceSets {
    integrationTest {
        java {
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
            srcDir file('src/integrationTest/java')
        }
        resources.srcDir file('src/integrationTest/resources')
    }
}

configurations {
    integrationTestCompile.extendsFrom testCompile
    integrationTestRuntime.extendsFrom testRuntime
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.11'

    integrationTestCompile group: 'commons-io', name: 'commons-io', version: '2.5'
    integrationTestCompile group: 'org.apache.activemq', name: 'activemq-broker', version: '5.14.5'
    integrationTestCompile group: 'org.apache.camel', name: 'camel-test', version: '2.18.3'
    integrationTestCompile project(path: ':utils', configuration: 'testOutput')

    compile group: 'com.hazelcast', name: 'hazelcast', version: '3.7.2'

    compile project(':models'), project(':utils'), project(':server'), project(':client')
}

// Summarized configurations, dependencies which are required in common by all sub projects
subprojects {
    apply plugin: 'java'

    repositories {
        jcenter()
        mavenCentral()
    }

    configurations.all {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
    }

    dependencies {
        // Logging dependencies using slf4j API and Logback
        compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.21'
        compile group: 'ch.qos.logback', name: 'logback-core', version: '1.1.7'
        compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.1.7'

        testCompile group: 'junit', name: 'junit', version: '4.11'
    }

    jar.baseName = 'traDE-' + project.name

    group 'de.unistuttgart.iaas.trade'
    version '1.0-SNAPSHOT'
    sourceCompatibility = 1.8
}

task wrapper(type: Wrapper) {
    gradleVersion = '3.3'
}

task integrationTest(type: Test) {
    testClassesDir = sourceSets.integrationTest.output.classesDir
    classpath = sourceSets.integrationTest.runtimeClasspath

    // Exclude the basic hazelcast integration tests since it is not used yet
    exclude '**/TraDENodeIT.class'

    // By default gradle skips tasks whose inputs and outputs are up to date.
    // Uncomment the following line to enforce the execution of the integration test whenever the corresponding task
    // is triggered no matter if something has changed or not.
    // outputs.upToDateWhen { false }
}

// Include the integration tests into the build process. Uncomment the following two lines if you prefer to trigger
// the integration tests only manually and not for each build.
// check.dependsOn integrationTest
// integrationTest.mustRunAfter test

// Ensure that distinct HTML reports for different types of tests are created
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}

// Add /config folder to classpath and correct paths in start scripts.
// To avoid 'the input line is too long' errors on windows, we replace all fully specified jars with a wildcard to
// the lib folder.
startScripts {
    classpath += files('config')
    doLast {
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/config', '$APP_HOME/config')
        windowsScriptFile.text = windowsScriptFile.text.replaceFirst(/(set CLASSPATH=%APP_HOME%\\lib\\).*/, {
            "${it[1]}*" + ";%APP_HOME%\\config"
        })
    }
}

distributions {
    main {
        baseName = 'traDE-all'
        contents {
            from('config') {
                into 'config'
            }
            from('notificationMsgTemplates') {
                into 'notificationMsgTemplates'
            }
            from('ssl') {
                into 'ssl'
            }
        }
    }
}

task createKeystoreFile {
    def keystoreFolder = file('ssl')
    if (file(keystoreFolder).exists()) {
        keystoreFolder.deleteDir()
    }
    keystoreFolder.mkdir()
    ant.genkey(alias: 'traDE', keystore: 'ssl/keystore.jks', storepass: 'someKeyStorePassword', keyalg: 'RSA',
            dname: 'CN=trade4chor.github.io, O=TraDE, C=DE', keysize: 2048)
}
assembleDist.dependsOn createKeystoreFile

jar {
    baseName = 'traDE-core'
}

def copyDocSpec = copySpec {
    from { project(':server').files('src/main/resources/swaggerui') }
    into 'docs'
}

war {
    baseName = 'traDE-core'
    // Add required folders to the WAR
    webInf { from 'config' into 'classes'}
    webInf { from 'notificationMsgTemplates' into 'notificationMsgTemplates'}
    webInf { from 'ssl' into 'ssl'}

    with copyDocSpec
}

task runAppInIDE(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath + files('config')
    main = 'org.trade.core.TraDENode'
}