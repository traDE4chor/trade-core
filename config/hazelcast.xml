<hazelcast
        xsi:schemaLocation="http://www.hazelcast.com/schema/config http://www.hazelcast.com/schema/config/hazelcast-config-3.7.xsd"
        xmlns="http://www.hazelcast.com/schema/config"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <network>
        <join><multicast enabled="true"/></join>
    </network>

    <properties>
        <property name="hazelcast.logging.type">slf4j</property>
    </properties>

    <map name="dataObjects">
        <time-to-live-seconds>120</time-to-live-seconds>
        <indexes>
            <index>identifier</index>
        </indexes>
        <backup-count>1</backup-count>
        <async-backup-count>1</async-backup-count>

        <map-store enabled="true" initial-mode="LAZY">
            <class-name>org.trade.core.persistence.DataObjectStore</class-name>
            <properties>
                <property name="mongo.url">${cache.db.url}</property>
                <property name="mongo.db">${cache.db.name}</property>
            </properties>
        </map-store>
    </map>

    <map name="dataObjectInstances">
        <time-to-live-seconds>120</time-to-live-seconds>
        <indexes>
            <index>identifier</index>
        </indexes>
        <backup-count>1</backup-count>
        <async-backup-count>1</async-backup-count>

        <map-store enabled="true" initial-mode="LAZY">
            <class-name>org.trade.core.persistence.DataObjectInstanceStore</class-name>
            <properties>
                <property name="mongo.url">${cache.db.url}</property>
                <property name="mongo.db">${cache.db.name}</property>
            </properties>
        </map-store>
    </map>

    <map name="dataElements">
        <time-to-live-seconds>120</time-to-live-seconds>
        <indexes>
            <index>identifier</index>
        </indexes>
        <backup-count>1</backup-count>
        <async-backup-count>1</async-backup-count>

        <map-store enabled="true" initial-mode="LAZY">
            <class-name>org.trade.core.persistence.DataElementStore</class-name>
            <properties>
                <property name="mongo.url">${cache.db.url}</property>
                <property name="mongo.db">${cache.db.name}</property>
            </properties>
        </map-store>
    </map>

    <map name="dataElementInstances">
        <time-to-live-seconds>120</time-to-live-seconds>
        <indexes>
            <index>identifier</index>
        </indexes>
        <backup-count>1</backup-count>
        <async-backup-count>1</async-backup-count>

        <map-store enabled="true" initial-mode="LAZY">
            <class-name>org.trade.core.persistence.DataElementInstanceStore</class-name>
            <properties>
                <property name="mongo.url">${cache.db.url}</property>
                <property name="mongo.db">${cache.db.name}</property>
            </properties>
        </map-store>
    </map>

    <map name="dataValues">
        <time-to-live-seconds>120</time-to-live-seconds>
        <indexes>
            <index>identifier</index>
        </indexes>
        <backup-count>1</backup-count>
        <async-backup-count>1</async-backup-count>

        <map-store enabled="true" initial-mode="LAZY">
            <class-name>org.trade.core.persistence.DataValueStore</class-name>
            <properties>
                <property name="mongo.url">${cache.db.url}</property>
                <property name="mongo.db">${cache.db.name}</property>
            </properties>

            <!-- The problem is not related to the way how hazelcast persists nor how morphia synchronizes the data,
            it is related to the transient flag of the data field. Since we mark this field transient to avoid
            synchronizing it between nodes through hazelcast, we directly disable its persistent. This happens
            because morphia is only able to store data which is stored within the configured hazelcast maps.
            Therefore, because we keep the data out of these maps, the corresponding map store can not persist them. -->
            <!-- Configure write through so that data values are directly persisted when they are created. -->
            <!-- <write-delay-seconds>0</write-delay-seconds> -->
        </map-store>
    </map>
</hazelcast>