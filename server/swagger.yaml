swagger: '2.0'
info:
  title: TraDE Middleware API
  description: This is the API of the TraDE middleware.
  version: 0.0.1
  contact:
    name: TraDE4Chor Team
    url: 'http://trade4chor.github.io'
    email: trade4chor@gmail.com
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
basePath: /api
consumes:
  - application/json
produces:
  - application/json
externalDocs:
  description: Find more info here
  url: 'http://trade4chor.github.io/docs'
paths:
  /dataDependencyGraphs:
    x-swagger-router-controller: DataDependencyGraph
    get:
      tags:
        - dataDependencyGraph
      description: >-
        Gets all available `DataDependencyGraph` resources.

        Optional query parameter of **start** and **size** enable pagination of
        the collection of data dependency graph resources and param
        **targetNamespace**, **name** and **entity** filter result list by name,
        targetNamespace and entity.
      operationId: getDataDependencyGraphs
      parameters:
        - $ref: '#/parameters/startParam'
        - $ref: '#/parameters/sizeParam'
        - name: targetNamespace
          in: query
          description: Target namespace of data dependency graph to return
          required: false
          type: string
        - name: name
          in: query
          description: Name of data dependency graph to return
          required: false
          type: string
        - name: entity
          in: query
          description: Creating entity of data dependency graph to return
          required: false
          type: string
      responses:
        '200':
          description: >-
            Returns all `DataDependencyGraph` resources based on the provided
            parameters.
          schema:
            $ref: '#/definitions/DataDependencyGraphArrayWithLinks'
        '500':
          $ref: '#/responses/ErrorResponse'
    post:
      tags:
        - dataDependencyGraph
      summary: Creates and adds a new data dependency graph to the TraDE middleware
      operationId: addDataDependencyGraph
      parameters:
        - in: body
          name: dataDependencyGraphData
          description: >-
            The name and creating entity of the data dependency graph that will
            be created.
          required: true
          schema:
            type: object
            required:
              - name
              - entity
            properties:
              name:
                type: string
              entity:
                type: string
      responses:
        '201':
          description: Successfully created and added a new data dependency graph
          headers:
            Location:
              type: string
          schema:
            $ref: '#/definitions/DataDependencyGraphWithLinks'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataDependencyGraphs/{graphId}':
    x-swagger-router-controller: DataDependencyGraph
    get:
      tags:
        - dataDependencyGraph
      summary: Find a data dependency graph by Id
      operationId: getDataDependencyGraphDirectly
      parameters:
        - in: path
          name: graphId
          description: Id of the data dependency graph that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: >-
            Returns a `DataDependencyGraph` resource based on the provided
            parameters.
          schema:
            $ref: '#/definitions/DataDependencyGraphWithLinks'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    delete:
      tags:
        - dataDependencyGraph
      summary: Deletes a data dependency graph.
      description: Deletes a data dependency graph from the TraDE middleware.
      operationId: deleteDataDependencyGraph
      parameters:
        - in: path
          name: graphId
          description: Id of the data dependency graph that needs to be fetched
          required: true
          type: string
      responses:
        '204':
          description: Successfully deleted data dependency graph
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataDependencyGraphs/{graphId}/serialized-graph':
    x-swagger-router-controller: DataDependencyGraph
    get:
      tags:
        - dataDependencyGraph
      summary: Provides the serialized graph model of the data dependency graph
      operationId: downloadGraphModel
      produces:
        - application/octet-stream
        - application/json
      parameters:
        - in: path
          name: graphId
          description: Id of the data dependency graph that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: The serialized graph model
          schema:
            type: string
            format: binary
          headers:
            Content-Length:
              type: integer
              format: int64
            Content-Type:
              type: string
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    post:
      tags:
        - dataDependencyGraph
      summary: >-
        Upload a serialized graph model to the TraDE middleware in order to make
        it available.
      operationId: uploadGraphModel
      consumes:
        - application/octet-stream
      parameters:
        - in: path
          name: graphId
          description: Id of the data dependency graph that needs to be fetched
          required: true
          type: string
        - in: header
          name: Content-Length
          description: The size of the serialized graph model passed as header
          required: true
          type: integer
          format: int64
        - in: body
          name: graph
          description: The serialized graph model to upload.
          required: true
          schema:
            type: string
            format: binary
      responses:
        '204':
          description: Successfully uploaded the graph model to the TraDE middleware.
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataDependencyGraphs/{graphId}/dataModel':
    x-swagger-router-controller: DataModel
    get:
      tags:
        - dataModel
      summary: Get the data model associated to the data dependency graph.
      operationId: getDataModel
      parameters:
        - in: path
          name: graphId
          description: Id of the data dependency graph that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: >-
            Returns the `DataModel` resource associated to the data dependency
            graph.
          schema:
            $ref: '#/definitions/DataModelWithLinks'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    post:
      tags:
        - dataModel
      summary: Associates an existing dataModel to the data dependency graph.
      operationId: setDataModel
      parameters:
        - in: path
          name: graphId
          description: Id of the data dependency graph that needs to be fetched
          required: true
          type: string
        - in: body
          name: dataModelId
          description: >-
            The id of a data model that should be associated to this data
            dependency graph.
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Successfully associated a data model.
          headers:
            Location:
              type: string
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  /dataModels:
    x-swagger-router-controller: DataModel
    get:
      tags:
        - dataModel
      description: >-
        Gets all available `DataModel` resources.

        Optional query parameter of **start** and **size** enable pagination of
        the collection of data model resources and param **targetNamespace**,
        **name** and **entity** filter result list by name, targetNamespace and
        entity.
      operationId: getDataModels
      parameters:
        - $ref: '#/parameters/startParam'
        - $ref: '#/parameters/sizeParam'
        - name: targetNamespace
          in: query
          description: Target namespace of data model to return
          required: false
          type: string
        - name: name
          in: query
          description: Name of data model to return
          required: false
          type: string
        - name: entity
          in: query
          description: Creating entity of data dependency graph to return
          required: false
          type: string
      responses:
        '200':
          description: Returns all `DataModel` resources based on the provided parameters.
          schema:
            $ref: '#/definitions/DataModelArrayWithLinks'
        '500':
          $ref: '#/responses/ErrorResponse'
    post:
      tags:
        - dataModel
      summary: Creates and adds a new data model to the TraDE middleware
      operationId: addDataModel
      parameters:
        - in: body
          name: dataModelData
          description: The name and creating entity of the data model that will be created.
          required: true
          schema:
            type: object
            required:
              - name
              - entity
            properties:
              name:
                type: string
              entity:
                type: string
      responses:
        '201':
          description: Successfully created and added a new data model
          headers:
            Location:
              type: string
          schema:
            $ref: '#/definitions/DataModel'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataModels/{dataModelId}':
    x-swagger-router-controller: DataModel
    get:
      tags:
        - dataModel
      summary: Find a data model by Id
      operationId: getDataModelDirectly
      parameters:
        - in: path
          name: dataModelId
          description: Id of the data model that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: Returns a `DataModel` resource based on the provided parameters.
          schema:
            $ref: '#/definitions/DataModelWithLinks'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    delete:
      tags:
        - dataModel
      summary: Deletes a data model and all related resources.
      description: >-
        Deletes a data model and all resources related to it from the TraDE
        middleware. This means that all data objects and their data elements
        defined through this data model as well as their instances will be
        deleted. Therefore, the deletion of a data model should be handled with
        care since it is one of the core artifacts used by the TraDE middleware.
      operationId: deleteDataModel
      parameters:
        - in: path
          name: dataModelId
          description: Id of the data model that needs to be fetched
          required: true
          type: string
      responses:
        '204':
          description: Successfully deleted data model
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataModels/{dataModelId}/serialized-model':
    x-swagger-router-controller: DataModel
    get:
      tags:
        - dataModel
      summary: Provides the serialized data model
      operationId: downloadDataModel
      produces:
        - application/octet-stream
        - application/json
      parameters:
        - in: path
          name: dataModelId
          description: Id of the data model that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: The serialized data model
          schema:
            type: string
            format: binary
          headers:
            Content-Length:
              type: integer
              format: int64
            Content-Type:
              type: string
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    post:
      tags:
        - dataModel
      summary: >-
        Upload a serialized data model to the TraDE middleware in order to make
        it available.
      operationId: uploadDataModel
      consumes:
        - application/octet-stream
      parameters:
        - in: path
          name: dataModelId
          description: Id of the data model that needs to be fetched
          required: true
          type: string
        - in: header
          name: Content-Length
          description: The size of the serialized data model passed as header
          required: true
          type: integer
          format: int64
        - in: body
          name: model
          description: The serialized data model to upload.
          required: true
          schema:
            type: string
            format: binary
      responses:
        '204':
          description: Successfully uploaded the data model to the TraDE middleware.
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataModels/{dataModelId}/dataObjects':
    x-swagger-router-controller: DataObject
    get:
      tags:
        - dataObject
      description: >-
        Gets all `DataObject` resources which belong the data model.

        Optional query parameter of **start** and **size** enable pagination of
        the collection of data object resources.
      operationId: getDataObjects
      parameters:
        - $ref: '#/parameters/startParam'
        - $ref: '#/parameters/sizeParam'
        - in: path
          name: dataModelId
          description: Id of the data model that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: >-
            Returns all `DataObject` resources which belong the given data
            model.
          schema:
            $ref: '#/definitions/DataObjectArrayWithLinks'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  /dataObjects:
    x-swagger-router-controller: DataObject
    get:
      tags:
        - dataObject
      description: >-
        Gets all available `DataObject` resources.

        Optional query parameter of **start** and **size** enable pagination of
        the collection of data object resources, params **name** and **entity**
        filter result list by name and entity and param **status** filters
        result list by status of the data objects.
      operationId: getAllDataObjects
      parameters:
        - $ref: '#/parameters/startParam'
        - $ref: '#/parameters/sizeParam'
        - name: name
          in: query
          description: Name of data objects to return
          required: false
          type: string
        - name: entity
          in: query
          description: Creating entity of data dependency graph to return
          required: false
          type: string
        - name: status
          in: query
          description: Status of data objects to return
          required: false
          type: string
      responses:
        '200':
          description: Returns all `DataObject` resources based on the provided parameters.
          schema:
            $ref: '#/definitions/DataObjectArrayWithLinks'
        '500':
          $ref: '#/responses/ErrorResponse'
    post:
      tags:
        - dataObject
      summary: Creates and adds a new data object to the TraDE middleware
      operationId: addDataObject
      parameters:
        - in: body
          name: dataObjectData
          description: >-
            The name and creating entity of the data object that will be
            created.
          required: true
          schema:
            type: object
            required:
              - name
              - entity
            properties:
              name:
                type: string
              entity:
                type: string
      responses:
        '201':
          description: Successfully created and added a new data object
          headers:
            Location:
              type: string
          schema:
            $ref: '#/definitions/DataObject'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataObjects/{dataObjectId}':
    x-swagger-router-controller: DataObject
    get:
      tags:
        - dataObject
      summary: Find a data object by Id
      operationId: getDataObjectById
      parameters:
        - in: path
          name: dataObjectId
          description: Id of the data object that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: Returns a `DataObject` resource based on the provided parameters.
          schema:
            $ref: '#/definitions/DataObjectWithLinks'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    put:
      tags:
        - dataObject
      summary: >-
        Update an existing dataObject. If the dataObject belongs to a dataModel
        the update request will be rejected, since data models are immutable
        resources.
      description: Update an existing dataObject
      operationId: updateDataObject
      parameters:
        - in: path
          name: dataObjectId
          description: Id of the data object that needs to be updated
          required: true
          type: string
        - in: body
          name: dataObject
          description: >-
            The updated data object resource. Only changes to the following
            fields are reflected **name** and creating **entity**. All other
            changes are ignored since the corresponding fields of the resource
            are internally set by the server or are immutable.
          required: true
          schema:
            $ref: '#/definitions/DataObject'
      responses:
        '200':
          description: >-
            Returns the updated `DataObject` resource based on the provided
            modifications.
          schema:
            $ref: '#/definitions/DataObjectWithLinks'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    delete:
      tags:
        - dataObject
      summary: >-
        Deletes a dataObject. If the dataObject belongs to a dataModel the
        delete request will be rejected, since data models are immutable
        resources.
      description: >-
        Deletes a complete data object and its referenced data elements as well
        as all instances of conntected to both the data object and its data
        elements from the TraDE middleware
      operationId: deleteDataObject
      parameters:
        - in: path
          name: dataObjectId
          description: Id of the data object that needs to be fetched
          required: true
          type: string
      responses:
        '204':
          description: Data object and all associated resource are deleted successfully.
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataObjects/{dataObjectId}/instances':
    x-swagger-router-controller: DataObjectInstance
    get:
      tags:
        - dataObjectInstance
      description: >-
        Gets all available `DataObjectInstance` resources.

        Optional query parameter of **start** and **size** enable pagination of
        the collection of data object instance resources and param **status**
        filters result list by status of the data object instances.
      operationId: getDataObjectInstances
      parameters:
        - $ref: '#/parameters/startParam'
        - $ref: '#/parameters/sizeParam'
        - in: path
          name: dataObjectId
          description: Id of the data object that needs to be fetched
          required: true
          type: string
        - name: status
          in: query
          description: Status of data object instances to return
          required: false
          type: string
      responses:
        '200':
          description: >-
            Returns all `DataObjectInstance` resources based on the provided
            parameters.
          schema:
            $ref: '#/definitions/DataObjectInstanceArrayWithLinks'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    post:
      tags:
        - dataObjectInstance
      summary: >-
        Creates a data object instance for the specified dataObject. In addition
        a corresponding data element instance for all data elements of the
        specified dataObject are created.
      operationId: addDataObjectInstance
      parameters:
        - in: path
          name: dataObjectId
          description: Id of the data object that needs to be fetched
          required: true
          type: string
        - in: body
          name: dataObjectInstanceData
          description: >-
            The creating entity and correlation properties of the data object
            instance that will be created.
          required: true
          schema:
            type: object
            required:
              - createdBy
              - correlationProperties
            properties:
              createdBy:
                type: string
              correlationProperties:
                $ref: '#/definitions/CorrelationPropertyArray'
      responses:
        '201':
          description: Successfully created and added a new data object instance
          headers:
            Location:
              type: string
          schema:
            $ref: '#/definitions/DataObjectInstanceWithLinks'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataObjects/{dataObjectId}/dataElements':
    x-swagger-router-controller: DataElement
    get:
      tags:
        - dataElement
      description: >-
        Gets all available `DataElement` resources.

        Optional query parameter of **start** and **size** enable pagination of
        the collection of data element resources, param **name** filters result
        list by name and param **status** filters result list by status of the
        data elements.
      operationId: getDataElements
      parameters:
        - in: path
          name: dataObjectId
          description: Id of the data object that needs to be fetched
          required: true
          type: string
        - $ref: '#/parameters/startParam'
        - $ref: '#/parameters/sizeParam'
        - name: name
          in: query
          description: Name of data elements to return
          required: false
          type: string
        - name: status
          in: query
          description: Status of data elements to return
          required: false
          type: string
      responses:
        '200':
          description: >-
            Returns all `DataElement` resources based on the provided
            parameters.
          schema:
            $ref: '#/definitions/DataElementArrayWithLinks'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    post:
      tags:
        - dataElement
      summary: >-
        Add a new dataElement to the dataObject. If the dataObject belongs to a
        dataModel the create request will be rejected, since data models are
        immutable resources.
      operationId: addDataElement
      parameters:
        - in: path
          name: dataObjectId
          description: Id of the data object that needs to be fetched
          required: true
          type: string
        - in: body
          name: dataElementData
          description: >-
            The name and creating entity of the data element that will be
            created.
          required: true
          schema:
            type: object
            required:
              - name
              - entity
            properties:
              name:
                type: string
              entity:
                type: string
              type:
                type: string
              contentType:
                type: string
              isCollectionElement:
                type: boolean
      responses:
        '201':
          description: Successfully created and added a new data element
          headers:
            Location:
              type: string
          schema:
            $ref: '#/definitions/DataElementWithLinks'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  /dataObjectInstances:
    x-swagger-router-controller: DataObjectInstance
    get:
      tags:
      - dataObjectInstance
      description: >-
        Gets all available `DataObjectInstance` resources.

        Optional query parameter of **start** and **size** enable pagination of
        the collection of data object instance resources and param **status**
        filters result list by status of the data object instances.
      operationId: getAllDataObjectInstances
      parameters:
      - $ref: '#/parameters/startParam'
      - $ref: '#/parameters/sizeParam'
      - name: status
        in: query
        description: Status of data object instances to return
        required: false
        type: string
      responses:
        '200':
          description: Returns all `DataObjectInstance` resources based on the provided parameters.
          schema:
            $ref: '#/definitions/DataObjectInstanceArrayWithLinks'
        '500':
          $ref: '#/responses/ErrorResponse'
    post:
      tags:
        - dataObjectInstance
      description: >-
        Query an available `DataObjectInstance` resource based on specified
        parameters.

        Query parameters **dataModelName** and **dataObjectName** as well as
        **correlationProperties** transfered as request body are used as a query
        to find a matching data object instance.
      operationId: queryDataObjectInstance
      parameters:
        - name: dataModelNamespace
          in: query
          description: Namespace of the data model a data object instance should belong to.
          required: true
          type: string
        - name: dataModelName
          in: query
          description: Name of the data model a data object instance should belong to.
          required: true
          type: string
        - name: dataObjectName
          in: query
          description: The name of the data object the instance should belong to.
          required: true
          type: string
        - name: correlationProperties
          in: body
          description: >-
            An array of correlation properties associated with the searched data
            object instance.
          required: true
          schema:
            $ref: '#/definitions/CorrelationPropertyArray'
      responses:
        '200':
          description: >-
            Returns a `DataObjectInstance` resource based on the provided
            parameters.
          schema:
            $ref: '#/definitions/DataObjectInstanceWithLinks'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataObjectInstances/{instanceId}':
    x-swagger-router-controller: DataObjectInstance
    get:
      tags:
        - dataObjectInstance
      summary: Find a data object instance by Id
      operationId: getDataObjectInstance
      parameters:
        - in: path
          name: instanceId
          description: Id of the data object instance that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: >-
            Returns a `DataObjectInstance` resource based on the provided
            parameters.
          schema:
            $ref: '#/definitions/DataObjectInstanceWithLinks'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    delete:
      tags:
        - dataObjectInstance
      summary: Deletes a data object instance
      description: >-
        Deletes a complete data object instance and its referenced data element
        instances from the TraDE middleware
      operationId: deleteDataObjectInstance
      parameters:
        - in: path
          name: instanceId
          description: Id of the data object instance that needs to be fetched
          required: true
          type: string
      responses:
        '204':
          description: Successfully deleted data object instance
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataObjectInstances/{instanceId}/elementInstances':
    x-swagger-router-controller: DataElementInstance
    get:
      tags:
        - dataElementInstance
      description: >-
        Gets all available `DataElementInstance` resources.

        Optional query parameter of **start** and **size** enable pagination of
        the collection of data element instance resources and param **status**
        filters result list by status of the data element instances.
      operationId: getDataElementInstances
      parameters:
        - $ref: '#/parameters/startParam'
        - $ref: '#/parameters/sizeParam'
        - in: path
          name: instanceId
          description: Id of the data object instance that needs to be fetched
          required: true
          type: string
        - name: status
          in: query
          description: Status of data element instances to return
          required: false
          type: string
      responses:
        '200':
          description: >-
            Returns all `DataElementInstance` resources based on the provided
            parameters.
          schema:
            $ref: '#/definitions/DataElementInstanceArrayWithLinks'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataObjectInstances/{instanceId}/elementInstances/{dataElementName}':
    x-swagger-router-controller: DataElementInstance
    get:
      tags:
        - dataElementInstance
      summary: >-
        Get a data element instance from a data object instance by the name of
        the corresponding data element
      operationId: getDataElementInstanceByDataElementName
      parameters:
        - in: path
          name: instanceId
          description: Id of the data object instance that needs to be fetched
          required: true
          type: string
        - in: path
          name: dataElementName
          description: >-
            The name of the data element for which we want to get the instance
            from the current data object instance
          required: true
          type: string
      responses:
        '200':
          description: >-
            Returns a `DataElementInstance` resource based on the provided
            parameters.
          schema:
            $ref: '#/definitions/DataElementInstanceWithLinks'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  /dataElements:
    x-swagger-router-controller: DataElement
    get:
      tags:
        - dataElement
      description: >-
        Gets all available `DataElement` resources.

        Optional query parameter of **start** and **size** enable pagination of
        the collection of data element resources, param **name** filters result
        list by name and param **status** filters result list by status of the
        data elements.
      operationId: getAllDataElements
      parameters:
        - $ref: '#/parameters/startParam'
        - $ref: '#/parameters/sizeParam'
        - name: name
          in: query
          description: Name of data elements to return
          required: false
          type: string
        - name: status
          in: query
          description: Status of data elements to return
          required: false
          type: string
      responses:
        '200':
          description: >-
            Returns all `DataElement` resources based on the provided
            parameters.
          schema:
            $ref: '#/definitions/DataElementArrayWithLinks'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataElements/{dataElementId}':
    x-swagger-router-controller: DataElement
    get:
      tags:
        - dataElement
      summary: Find a data element by Id
      operationId: getDataElementDirectly
      parameters:
        - in: path
          name: dataElementId
          description: Id of the data element that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: Returns a `DataElement` resource based on the provided parameters.
          schema:
            $ref: '#/definitions/DataElementWithLinks'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    put:
      tags:
        - dataElement
      summary: >-
        Update an existing data element. If the parent dataObject belongs to a
        dataModel the update request will be rejected, since data models are
        immutable resources.
      description: Update an existing data element
      operationId: updateDataElement
      parameters:
        - in: path
          name: dataElementId
          description: Id of the data element that needs to be fetched
          required: true
          type: string
        - in: body
          name: dataElement
          description: >-
            The updated data element resource. Only changes to the following
            fields are reflected **name**, **type** and **contentType**. All
            other changes are ignored since the corresponding fields of the
            resource are internally set by the server or are immutable.
          required: true
          schema:
            $ref: '#/definitions/DataElement'
      responses:
        '200':
          description: >-
            Returns the updated `DataElement` resource based on the provided
            modifications.
          schema:
            $ref: '#/definitions/DataElementWithLinks'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    delete:
      tags:
        - dataElement
      summary: >-
        Deletes a data element. If the parent dataObject belongs to a dataModel
        the update request will be rejected, since data models are immutable
        resources.
      description: >-
        Deletes a complete data element and its referenced instances from the
        TraDE middleware
      operationId: deleteDataElement
      parameters:
        - in: path
          name: dataElementId
          description: Id of the data element that needs to be deleted
          required: true
          type: string
      responses:
        '204':
          description: Successfully deleted data element.
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataElements/{dataElementId}/instances':
    x-swagger-router-controller: DataElementInstance
    get:
      tags:
        - dataElementInstance
      description: >-
        Gets all available `DataElementInstance` resources.

        Optional query parameter of **start** and **size** enable pagination of
        the collection of data element instance resources and param **status**
        filters result list by status of the data element instances.
      operationId: getDataElementInstancesOfDataElement
      parameters:
        - $ref: '#/parameters/startParam'
        - $ref: '#/parameters/sizeParam'
        - in: path
          name: dataElementId
          description: Id of the data element that needs to be fetched
          required: true
          type: string
        - name: status
          in: query
          description: Status of data element instances to return
          required: false
          type: string
      responses:
        '200':
          description: >-
            Returns all `DataElementInstance` resources based on the provided
            parameters.
          schema:
            $ref: '#/definitions/DataElementInstanceArrayWithLinks'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  /dataElementInstances:
    x-swagger-router-controller: DataElementInstance
    get:
      tags:
      - dataElementInstance
      description: >-
        Gets all available `DataElementInstance` resources.

        Optional query parameter of **start** and **size** enable pagination of
        the collection of data element instance resources and param **status**
        filters result list by status of the data element instances.
      operationId: getAllDataElementInstances
      parameters:
      - $ref: '#/parameters/startParam'
      - $ref: '#/parameters/sizeParam'
      - name: status
        in: query
        description: Status of data element instances to return
        required: false
        type: string
      responses:
        '200':
          description: Returns all `DataElementInstance` resources based on the provided parameters.
          schema:
            $ref: '#/definitions/DataElementInstanceArrayWithLinks'
        '500':
          $ref: '#/responses/ErrorResponse'
    post:
      tags:
        - dataElementInstance
      description: >-
        Query an available `DataElementInstance` resource based on specified
        parameters.

        Query parameters **dataModelName**, **dataObjectName** and
        **dataElementName** as well as **correlationProperties** transfered as
        request body are used as a query to find a matching data element
        instance.
      operationId: queryDataElementInstance
      parameters:
        - name: dataModelNamespace
          in: query
          description: Namespace of the data model a data object instance should belong to.
          required: true
          type: string
        - name: dataModelName
          in: query
          description: Name of the data model a data element instance should belong to.
          required: true
          type: string
        - name: dataObjectName
          in: query
          description: The name of the data object the instance should belong to.
          required: true
          type: string
        - name: dataElementName
          in: query
          description: The name of the data element the instance should belong to.
          required: true
          type: string
        - name: correlationProperties
          in: body
          description: >-
            An array of correlation properties associated with the searched data
            element instance.
          required: true
          schema:
            $ref: '#/definitions/CorrelationPropertyArray'
      responses:
        '200':
          description: >-
            Returns a `DataElementInstance` resource based on the provided
            parameters.
          schema:
            $ref: '#/definitions/DataElementInstanceWithLinks'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataElementInstances/{instanceId}':
    x-swagger-router-controller: DataElementInstance
    get:
      tags:
        - dataElementInstance
      summary: Find a data element instance by Id
      operationId: getDataElementInstance
      parameters:
        - in: path
          name: instanceId
          description: Id of the data element instance that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: >-
            Returns a `DataElementInstance` resource based on the provided
            parameters.
          schema:
            $ref: '#/definitions/DataElementInstanceWithLinks'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataElementInstances/{instanceId}/dataValues':
    x-swagger-router-controller: DataValue
    get:
      tags:
        - dataValue
      summary: Get the data value(s) associated to the data element instance.
      description: >-
        Returns the complete list of `DataValue` resources associated to a `DataElementInstance` resource. With the
        optional query parameter **indexOfDataValue** one specific `DataValue` resource can be retrieved, if the
        underlying data element instance belongs to a collection data element. If the related data element is not a
        collection the index query parameter has no effect since at most one data value is associated to the data
        element instance. The current number of `DataValue` resources associated to a `DataElementInstance` resource
        are provided by the **numberOfDataValues** property of the `DataElementInstance` resource. The value of
        the query parameter **indexOfDataValue** has to be in the range of [1,**numberOfDataValues**].
      operationId: getDataValues
      parameters:
        - in: path
          name: instanceId
          description: Id of the data element instance that needs to be fetched
          required: true
          type: string
        - in: query
          name: indexOfDataValue
          description: >-
            The index of the associated data value to return. If the related data element is not a
            collection element, the index query parameter is ignored and always the single data value is returned.
          required: false
          type: integer
          format: int32
      responses:
        '200':
          description: >-
            Returns the `DataValue` resource associated to the data element
            instance.
          schema:
            $ref: '#/definitions/DataValueArrayWithLinks'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    post:
      tags:
        - dataValue
      summary: >-
        Creates a new or associates an existing dataValue to the data element
        instance.
      operationId: associateDataValueToDataElementInstance
      parameters:
        - in: path
          name: instanceId
          description: Id of the data element instance that needs to be fetched
          required: true
          type: string
        - in: body
          name: dataValueData
          description: >-
            DataValue object that needs to be created or associated. In case of
            updating the associated data value providing the Id is enough. To
            create and associate a new DataValue, a name, type and who created
            the data value are required. The specification of a contentType is
            only required if the data type of the data value is binary.
          schema:
            $ref: '#/definitions/DataValue'
      responses:
        '200':
          description: Successfully associated the specified data value
          headers:
            Location:
              type: string
          schema:
            $ref: '#/definitions/DataValueWithLinks'
        '201':
          description: Successfully created and associated a new data value
          headers:
            Location:
              type: string
          schema:
            $ref: '#/definitions/DataValueWithLinks'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataElementInstances/{instanceId}/dataValues/{dataValueId}':
    x-swagger-router-controller: DataValue
    delete:
      tags:
        - dataValue
      summary: >-
        Removes an associated dataValue from a data element
        instance.
      operationId: removeDataValueFromDataElementInstance
      parameters:
        - in: path
          name: instanceId
          description: Id of the data element instance that needs to be fetched
          required: true
          type: string
        - in: path
          name: dataValueId
          description: >-
            The id of the DataValue object that is associated and should be remove from the data element instance.
          required: true
          type: string
      responses:
        '204':
          description: Successfully removed the association between the specified data value and data element instance.
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  /dataValues:
    x-swagger-router-controller: DataValue
    get:
      tags:
        - dataValue
      description: >-
        Gets all available `DataValue` resources.

        Optional query parameter of **start** and **size** enable pagination of
        the collection of data value resources, param **createdBy** filters
        result list by the creator and param **status** filters result list by
        status of the data values.
      operationId: getDataValuesDirectly
      parameters:
        - $ref: '#/parameters/startParam'
        - $ref: '#/parameters/sizeParam'
        - name: status
          in: query
          description: Status of data values to return
          required: false
          type: string
        - name: createdBy
          in: query
          description: Name of the data element to which instance a data value belongs
          required: false
          type: string
      responses:
        '200':
          description: Returns all `DataValue` resources based on the provided parameters.
          schema:
            $ref: '#/definitions/DataValueArrayWithLinks'
        '500':
          $ref: '#/responses/ErrorResponse'
    post:
      tags:
        - dataValue
      summary: Creates and adds a new data value to the TraDE middleware
      operationId: addDataValue
      parameters:
        - in: body
          name: dataValueData
          description: >-
            The name, type and who created the data value are required. The
            specification of a contentType is only required if the data type is
            binary.
          required: true
          schema:
            type: object
            required:
              - name
              - createdBy
              - type
            properties:
              name:
                type: string
              createdBy:
                type: string
              type:
                type: string
              contentType:
                type: string
      responses:
        '201':
          description: Successfully created and added a new data value
          headers:
            Location:
              type: string
          schema:
            $ref: '#/definitions/DataValue'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataValues/{dataValueId}':
    x-swagger-router-controller: DataValue
    get:
      tags:
        - dataValue
      summary: Find a data value by Id
      operationId: getDataValueDirectly
      parameters:
        - in: path
          name: dataValueId
          description: Id of the data value that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: Returns a `DataValue` resource based on the provided parameters.
          schema:
            $ref: '#/definitions/DataValueWithLinks'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    put:
      tags:
        - dataValue
      summary: Update an existing data value
      description: ''
      operationId: updateDataValueDirectly
      parameters:
        - in: path
          name: dataValueId
          description: Id of the data value that needs to be fetched
          required: true
          type: string
        - in: body
          name: dataValue
          description: >-
            The updated data value resource. Only changes to the following
            fields are reflected **name**, **type** and **contentType**. All
            other changes are ignored since the corresponding fields of the
            resource are internally set by the server or are immutable.
          required: true
          schema:
            $ref: '#/definitions/DataValue'
      responses:
        '200':
          description: >-
            Returns the updated `DataValue` resource based on the provided
            modifications.
          schema:
            $ref: '#/definitions/DataValueWithLinks'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    delete:
      tags:
        - dataValue
      summary: Deletes a data value
      description: >-
        Deletes a data value and its associated data from the TraDE middleware.
        All references from data element instances are invalidated accordingly.
      operationId: deleteDataValue
      parameters:
        - in: path
          name: dataValueId
          description: Id of the data value that needs to be fetched
          required: true
          type: string
      responses:
        '204':
          description: Successfully deleted data value
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataValues/{dataValueId}/data':
    x-swagger-router-controller: DataValue
    get:
      tags:
        - dataValue
      summary: Pulls data from the data value identified by Id
      operationId: pullDataValue
      produces:
        - application/octet-stream
        - application/json
      parameters:
        - in: path
          name: dataValueId
          description: Id of the data value that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: Data attached to data value
          schema:
            type: string
            format: binary
          headers:
            Content-Length:
              type: integer
              format: int64
            Content-Type:
              type: string
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    post:
      tags:
        - dataValue
      summary: >-
        Pushes data to the TraDE middleware by attaching it to the data value
        identified by Id
      operationId: pushDataValue
      consumes:
        - application/octet-stream
      parameters:
        - in: path
          name: dataValueId
          description: Id of the data value to attach data to
          required: true
          type: string
        - in: header
          name: X-ResolveAsLinkToData
          description: Whether the body contains the actual data (false) or a link to the data (true).
          required: false
          type: boolean
          default: false
        - in: header
          name: Content-Length
          description: The size of the data passed as header
          type: integer
          format: int64
        - in: body
          name: data
          description: >-
            The data to push. It can be either provided directly in binary format
            (byte[]) or referenced through a link (http://example.org/data) where the
            data can be retrieved. If a link is passed, the **X-ResolveAsLinkToData**
            header should be set to true, to trigger the resolution of the link, else
            the link itself will be perceived as the data to be stored.
          required: true
          schema:
            type: string
            format: binary
      responses:
        '204':
          description: Successfully pushed data to TraDE middleware.
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/dataValues/{dataValueId}/elementInstances':
    x-swagger-router-controller: DataElementInstance
    get:
      tags:
        - dataElementInstance
      summary: >-
        Provides a list of all data element instances that use/refer to the data
        value with the given id. Optional query parameter of **start** and
        **size** enable pagination of the collection of data element instance
        resources.
      operationId: getDataElementInstancesUsingDataValue
      parameters:
        - $ref: '#/parameters/startParam'
        - $ref: '#/parameters/sizeParam'
        - in: path
          name: dataValueId
          description: Id of the data value that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: >-
            Returns an array of `DataElementInstance` resource for the given
            data value.
          schema:
            $ref: '#/definitions/DataElementInstanceArrayWithLinks'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  /notifications:
    x-swagger-router-controller: Notification
    get:
      tags:
        - notification
      description: >-
        Gets all available `Notification` resources.

        Optional query parameter of **start** and **size** enable pagination of
        the collection of notification resources, param **name** filters result
        list by the name and param **notifierServiceId** filters result list by
        the associated notifier service of the notification.
      operationId: getNotifications
      parameters:
        - $ref: '#/parameters/startParam'
        - $ref: '#/parameters/sizeParam'
        - name: name
          in: query
          description: Name of notifications to return
          required: false
          type: string
        - name: notifierServiceId
          in: query
          description: The id of the notifier service used by a notification
          required: false
          type: string
      responses:
        '200':
          description: >-
            Returns all `Notification` resources based on the provided
            parameters.
          schema:
            $ref: '#/definitions/NotificationArrayWithLinks'
        '500':
          $ref: '#/responses/ErrorResponse'
    post:
      tags:
        - notification
      summary: Creates and adds a new notification to the TraDE middleware
      operationId: addNotification
      parameters:
        - in: body
          name: notificationData
          description: >-
            A name, notifier service id and an array of corresponding notifier
            parameter values are required. Furthermore, the id of the resource
            to observe, i.e., the resource for which this notification is
            registered or an array of resource filtes has to be provided. The
            resource filters allow to specify filter criteria which is evaluated
            in order to decide if a notification is triggered as a result of an
            event (e.g., state of a resource changed) or not.
          required: true
          schema:
            type: object
            required:
              - name
              - selectedNotifierServiceId
              - notifierParameterValues
            properties:
              name:
                type: string
              typeOfResourceToObserve:
                $ref: '#/definitions/ResourceTypeEnum'
              idOfResourceToObserve:
                type: string
              resourceFilters:
                $ref: '#/definitions/ResourceEventFilterArray'
              selectedNotifierServiceId:
                type: string
              notifierParameterValues:
                $ref: '#/definitions/NotifierServiceParameterArray'
      responses:
        '201':
          description: Successfully created and added a new notification
          headers:
            Location:
              type: string
          schema:
            $ref: '#/definitions/Notification'
        '400':
          $ref: '#/responses/InvalidInputResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/notifications/{notificationId}':
    x-swagger-router-controller: Notification
    get:
      tags:
        - notification
      summary: Find a notification by Id
      operationId: getNotificationDirectly
      parameters:
        - in: path
          name: notificationId
          description: Id of the notification that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: Returns a `Notification` resource based on the provided parameters.
          schema:
            $ref: '#/definitions/NotificationWithLinks'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    put:
      tags:
        - notification
      summary: Update an existing notification
      description: ''
      operationId: updateNotificationDirectly
      parameters:
        - in: path
          name: notificationId
          description: Id of the notification that needs to be fetched
          required: true
          type: string
        - in: body
          name: notification
          description: >-
            The updated notification resource. Changes to the fields **id** and
            **href** are ignored since the corresponding fields of the resource
            are internally set by the server.
          required: true
          schema:
            $ref: '#/definitions/Notification'
      responses:
        '200':
          description: >-
            Returns the updated `Notification` resource based on the provided
            modifications.
          schema:
            $ref: '#/definitions/NotificationWithLinks'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
    delete:
      tags:
        - notification
      summary: Deletes a notification
      description: Deletes a notification from the TraDE middleware.
      operationId: deleteNotification
      parameters:
        - in: path
          name: notificationId
          description: Id of the notification that needs to be fetched
          required: true
          type: string
      responses:
        '204':
          description: Successfully deleted notification
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/notifications/{notificationId}/notifierService':
    x-swagger-router-controller: NotifierService
    get:
      tags:
        - notifierService
      summary: Get the associated notifier service of this notification
      operationId: getNotifierServiceOfNotification
      parameters:
        - in: path
          name: notificationId
          description: >-
            Id of the notification for which the notifier service should to be
            fetched
          required: true
          type: string
      responses:
        '200':
          description: >-
            Returns a `NotifierService` resource based on the provided
            parameters.
          schema:
            $ref: '#/definitions/NotifierService'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  /notifierServices:
    x-swagger-router-controller: NotifierService
    get:
      tags:
        - notifierService
      description: >-
        Gets all available `NotifierService` resources.

        Optional query parameter of **start** and **size** enable pagination of
        the collection of notifier service resources.
      operationId: getNotifierServices
      parameters:
        - $ref: '#/parameters/startParam'
        - $ref: '#/parameters/sizeParam'
      responses:
        '200':
          description: >-
            Returns all `NotifierService` resources based on the provided
            parameters.
          schema:
            $ref: '#/definitions/NotifierServiceArrayWithLinks'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/notifierServices/{notifierServiceId}':
    x-swagger-router-controller: NotifierService
    get:
      tags:
        - notifierService
      summary: Find a notifier service by Id
      operationId: getNotifierServiceDirectly
      parameters:
        - in: path
          name: notifierServiceId
          description: Id of the notifier service that needs to be fetched
          required: true
          type: string
      responses:
        '200':
          description: >-
            Returns a `NotifierService` resource based on the provided
            parameters.
          schema:
            $ref: '#/definitions/NotifierService'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
  /resourceEventFilters:
    x-swagger-router-controller: ResourceEventFilter
    get:
      tags:
        - resourceEventFilter
      description: >-
        Gets all available `resourceEventFilter` resources.

        Optional query parameter of **start** and **size** enable pagination of
        the collection of resource event filter resources, param **eventType**
        filters result list by the event types of even filter descriptions.
      operationId: getResourceEventFilters
      parameters:
        - $ref: '#/parameters/startParam'
        - $ref: '#/parameters/sizeParam'
        - in: query
          name: eventType
          description: Event type of resource event filter descriptions to return
          required: false
          type: string
      responses:
        '200':
          description: >-
            Returns all `ResourceEventFilter` resources based on the provided
            parameters.
          schema:
            $ref: '#/definitions/ResourceEventFilterDescriptionArrayWithLinks'
        '500':
          $ref: '#/responses/ErrorResponse'
  '/resourceEventFilters/{resourceEventFilterId}':
    x-swagger-router-controller: ResourceEventFilter
    get:
      tags:
        - resourceEventFilter
      summary: Find a resource event filter description by Id
      description: >-
        Provides one or more available `resourceEventFilter` descriptions based
        on the provided parameters.

        Optional query parameter of **eventType** filters result list by the
        event types of even filter descriptions.
      operationId: getResourceEventFilterDirectly
      parameters:
        - in: path
          name: resourceEventFilterId
          description: Id of the resource event filter that needs to be fetched
          required: true
          type: string
        - in: query
          name: eventType
          description: Event type of resource event filter descriptions to return
          required: false
          type: string
      responses:
        '200':
          description: >-
            Returns a `ResourceEventFilter` resource based on the provided
            parameters.
          schema:
            $ref: '#/definitions/ResourceEventFilterDescriptionArray'
        '404':
          $ref: '#/responses/NotFoundResponse'
        '500':
          $ref: '#/responses/ErrorResponse'
definitions:
  DataDependencyGraph:
    type: object
    properties:
      id:
        type: string
      href:
        type: string
      entity:
        type: string
      name:
        type: string
      targetNamespace:
        type: string
      transformations:
        type: array
        items:
          $ref: '#/definitions/DataTransformation'
  DataDependencyGraphWithLinks:
    type: object
    properties:
      dataDependencyGraph:
        $ref: '#/definitions/DataDependencyGraph'
      links:
        $ref: '#/definitions/LinkArray'
  DataDependencyGraphArray:
    type: array
    items:
      $ref: '#/definitions/DataDependencyGraphWithLinks'
  DataDependencyGraphArrayWithLinks:
    type: object
    properties:
      dataDependencyGraphs:
        $ref: '#/definitions/DataDependencyGraphArray'
      links:
        $ref: '#/definitions/LinkArray'
  DataTransformation:
    type: object
    properties:
      name:
        type: string
      transformerQName:
        type: string
      transformerParameters:
        type: array
        items:
          type: object
          properties:
            parameterName:
              type: string
            parameterValue:
              type: string
  DataModel:
    type: object
    properties:
      id:
        type: string
      href:
        type: string
      entity:
        type: string
      name:
        type: string
      targetNamespace:
        type: string
      status:
        $ref: '#/definitions/StatusEnum'
  DataModelWithLinks:
    type: object
    properties:
      dataModel:
        $ref: '#/definitions/DataModel'
      links:
        $ref: '#/definitions/LinkArray'
  DataModelArray:
    type: array
    items:
      $ref: '#/definitions/DataModelWithLinks'
  DataModelArrayWithLinks:
    type: object
    properties:
      dataModels:
        $ref: '#/definitions/DataModelArray'
      links:
        $ref: '#/definitions/LinkArray'
  DataObject:
    type: object
    properties:
      id:
        type: string
      href:
        type: string
      dataModelName:
        type: string
      entity:
        type: string
      name:
        type: string
      status:
        $ref: '#/definitions/StatusEnum'
  DataObjectWithLinks:
    type: object
    properties:
      dataObject:
        $ref: '#/definitions/DataObject'
      links:
        $ref: '#/definitions/LinkArray'
  DataObjectArray:
    type: array
    items:
      $ref: '#/definitions/DataObjectWithLinks'
  DataObjectArrayWithLinks:
    type: object
    properties:
      dataObjects:
        $ref: '#/definitions/DataObjectArray'
      links:
        $ref: '#/definitions/LinkArray'
  DataObjectInstance:
    type: object
    properties:
      id:
        type: string
      href:
        type: string
      createdBy:
        type: string
      dataObjectName:
        type: string
      correlationProperties:
        $ref: '#/definitions/CorrelationPropertyArray'
      status:
        $ref: '#/definitions/InstanceStatusEnum'
  DataObjectInstanceWithLinks:
    type: object
    properties:
      instance:
        $ref: '#/definitions/DataObjectInstance'
      links:
        $ref: '#/definitions/LinkArray'
  DataObjectInstanceArray:
    type: array
    items:
      $ref: '#/definitions/DataObjectInstanceWithLinks'
  DataObjectInstanceArrayWithLinks:
    type: object
    properties:
      instances:
        $ref: '#/definitions/DataObjectInstanceArray'
      links:
        $ref: '#/definitions/LinkArray'
  DataElement:
    type: object
    properties:
      id:
        type: string
      href:
        type: string
      dataObjectName:
        type: string
      entity:
        type: string
      name:
        type: string
      status:
        $ref: '#/definitions/StatusEnum'
      type:
        type: string
      contentType:
        type: string
      isCollectionElement:
        type: boolean
  DataElementWithLinks:
    type: object
    properties:
      dataElement:
        $ref: '#/definitions/DataElement'
      links:
        $ref: '#/definitions/LinkArray'
  DataElementArray:
    type: array
    items:
      $ref: '#/definitions/DataElementWithLinks'
  DataElementArrayWithLinks:
    type: object
    properties:
      dataElements:
        $ref: '#/definitions/DataElementArray'
      links:
        $ref: '#/definitions/LinkArray'
  DataElementInstance:
    type: object
    properties:
      id:
        type: string
      href:
        type: string
      createdBy:
        type: string
      dataElementName:
        type: string
      numberOfDataValues:
        type: integer
        format: int32
      correlationProperties:
        $ref: '#/definitions/CorrelationPropertyArray'
      status:
        $ref: '#/definitions/InstanceStatusEnum'
  DataElementInstanceWithLinks:
    type: object
    properties:
      instance:
        $ref: '#/definitions/DataElementInstance'
      links:
        $ref: '#/definitions/LinkArray'
  DataElementInstanceArray:
    type: array
    items:
      $ref: '#/definitions/DataElementInstanceWithLinks'
  DataElementInstanceArrayWithLinks:
    type: object
    properties:
      instances:
        $ref: '#/definitions/DataElementInstanceArray'
      links:
        $ref: '#/definitions/LinkArray'
  DataValue:
    type: object
    properties:
      id:
        type: string
      href:
        type: string
      name:
        type: string
      createdBy:
        type: string
      type:
        type: string
      contentType:
        type: string
      created:
        type: string
        format: date-time
      lastModified:
        type: string
        format: date-time
      status:
        $ref: '#/definitions/InstanceStatusEnum'
      size:
        type: integer
        format: int64
  DataValueWithLinks:
    type: object
    properties:
      dataValue:
        $ref: '#/definitions/DataValue'
      links:
        $ref: '#/definitions/LinkArray'
  DataValueArray:
    type: array
    items:
      $ref: '#/definitions/DataValueWithLinks'
  DataValueArrayWithLinks:
    type: object
    properties:
      dataValues:
        $ref: '#/definitions/DataValueArray'
      links:
        $ref: '#/definitions/LinkArray'
  CorrelationProperty:
    type: object
    properties:
      key:
        type: string
      value:
        type: string
  CorrelationPropertyArray:
    type: array
    items:
      $ref: '#/definitions/CorrelationProperty'
  Notification:
    type: object
    properties:
      id:
        type: string
      href:
        type: string
      name:
        type: string
      typeOfResourceToObserve:
        $ref: '#/definitions/ResourceTypeEnum'
      idOfResourceToObserve:
        type: string
      resourceFilters:
        $ref: '#/definitions/ResourceEventFilterArray'
      selectedNotifierServiceId:
        type: string
      notifierParameterValues:
        $ref: '#/definitions/NotifierServiceParameterArray'
  NotifierServiceParameter:
    type: object
    properties:
      parameterName:
        type: string
      value:
        type: string
  NotifierServiceParameterArray:
    type: array
    items:
      $ref: '#/definitions/NotifierServiceParameter'
  ResourceEventFilter:
    type: object
    properties:
      filterName:
        type: string
      filterValue:
        type: string
  ResourceEventFilterArray:
    type: array
    items:
      $ref: '#/definitions/ResourceEventFilter'
  NotificationWithLinks:
    type: object
    properties:
      notification:
        $ref: '#/definitions/Notification'
      links:
        $ref: '#/definitions/LinkArray'
  NotificationArray:
    type: array
    items:
      $ref: '#/definitions/NotificationWithLinks'
  NotificationArrayWithLinks:
    type: object
    properties:
      notifications:
        $ref: '#/definitions/NotificationArray'
      links:
        $ref: '#/definitions/LinkArray'
  NotifierService:
    type: object
    properties:
      id:
        type: string
      href:
        type: string
      parameters:
        $ref: '#/definitions/NotifierServiceParameterDescriptionArray'
  NotifierServiceArray:
    type: array
    items:
      $ref: '#/definitions/NotifierService'
  NotifierServiceArrayWithLinks:
    type: object
    properties:
      notifierServices:
        $ref: '#/definitions/NotifierServiceArray'
      links:
        $ref: '#/definitions/LinkArray'
  NotifierServiceParameterDescription:
    type: object
    properties:
      parameterName:
        type: string
      description:
        type: string
  NotifierServiceParameterDescriptionArray:
    type: array
    items:
      $ref: '#/definitions/NotifierServiceParameterDescription'
  ResourceEventFilterDescription:
    type: object
    properties:
      href:
        type: string
      eventType:
        type: string
      filterName:
        type: string
      description:
        type: string
      valueDomainConstraints:
        type: array
        items:
          type: string
  ResourceEventFilterDescriptionArray:
    type: array
    items:
      $ref: '#/definitions/ResourceEventFilterDescription'
  ResourceEventFilterDescriptionArrayWithLinks:
    type: object
    properties:
      resourceFilterDescriptions:
        $ref: '#/definitions/ResourceEventFilterDescriptionArray'
      links:
        $ref: '#/definitions/LinkArray'
  ResourceTypeEnum:
    type: string
    default: DataValue
    enum:
      - DataDependencyGraph
      - DataModel
      - DataObject
      - DataElement
      - DataObjectInstance
      - DataElementInstance
      - DataValue
  StatusEnum:
    type: string
    default: created
    enum:
      - created
      - ready
      - archived
  InstanceStatusEnum:
    type: string
    default: created
    enum:
      - created
      - initialized
      - archived
  InvalidInput:
    type: object
    properties:
      property:
        type: string
      message:
        type: string
      example:
        type: string
      moreInfo:
        type: string
  NotFound:
    type: object
    properties:
      properties:
        type: array
        items:
          type: string
      message:
        type: string
  Error:
    type: object
    properties:
      status:
        type: integer
        format: int32
      errorCode:
        type: integer
        format: int32
      property:
        type: string
      message:
        type: string
      developerMessage:
        type: string
      moreInfo:
        type: string
  Link:
    type: object
    required:
      - href
      - rel
    properties:
      href:
        type: string
      rel:
        type: string
      type:
        type: string
      title:
        type: string
      hreflang:
        type: string
      length:
        type: string
  LinkArray:
    description: >-
      An array of links which enable navigation, e.g., to support pagination of
      collection resources
    type: array
    items:
      $ref: '#/definitions/Link'
parameters:
  startParam:
    name: start
    in: query
    description: Start index of returned collection of resources for pagination.
    required: false
    type: integer
    format: int32
    default: 1
    minimum: 1
  sizeParam:
    name: size
    in: query
    description: Size of the returned sub-collection of resources for pagination.
    required: false
    type: integer
    format: int32
    default: 50
    minimum: 1
responses:
  ErrorResponse:
    description: Server error
    schema:
      $ref: '#/definitions/Error'
  NotFoundResponse:
    description: >-
      The required resource was not found based on the provided query
      parameters.
    schema:
      $ref: '#/definitions/NotFound'
  InvalidInputResponse:
    description: Invalid input
    schema:
      $ref: '#/definitions/InvalidInput'