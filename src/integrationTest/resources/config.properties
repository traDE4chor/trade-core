#
# Copyright 2016 Michael Hahn
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

# Configure the URL under which the API of the TraDE Middleware is exposed publicly, i.e., using the public IP of the
# underlying host so that the data transformation framework (HDTApps) can access data values to transform them and
# upload transformation results.
trade.url=http://127.0.0.1:8080/api

# Configure the deployment mode. This means if the TraDE middleware is deployed and operated as a single node
# (mode=SINGLE_NODE) or as a connected network of multiple nodes using Hazelcast (mode=MULTI_NODE). In addition also
# a custom mode (mode=CUSTOM) can be specified. In this case users have to provide a list of corresponding references
# to classes which implement all required interfaces, e.g., IDataManager. We assume that the resulting implementation
# follows the singleton pattern using an enum with an 'INSTANCE' constant. The class SimpleDataManager.java can be
# used as a template for custom implementations.
deployment.mode=CUSTOM
data.manager.class=org.trade.core.data.management.simple.SimpleDataManager

# Configure the embedded Jetty server
server.port.http=8080
server.port.https=8443
server.threads.max=500
server.ssl.keystore.path=/ssl/keystore.jks
# You can specify the required passwords in plain text or use Jetty's password utility to generate obfuscated,
# checksummed or encrypted versions. See [https://wiki.eclipse.org/Jetty/Howto/Secure_Passwords] for more information.
server.ssl.keystore.password=someKeyStorePassword

# Configure MongoDB properties for the persistence of the cached data of Hazelcast
cache.db.url=mongodb://127.0.0.1:27017
cache.db.name=testCacheDB

# Configure which mode ('FILE', 'DB' or 'CUSTOM') should be used to persist the data. In custom mode users have to
# provide a corresponding implementation of the IPersistenceProvider interface. We assume that the resulting
# implementation provides an no-argument constructor. The class FileSystemPersistence.java can be used as a template
# for custom implementations.
data.persistence.mode=CUSTOM
data.persistence.provider.class=org.trade.core.persistence.local.mongo.MongoPersistence

# Database properties are only used/relevant in 'DB' mode
data.persistence.db.url=mongodb://127.0.0.1:27017
data.persistence.db.name=testDataDB

# Configure which notification mode ('CAMEL' or 'CUSTOM') should be used to realize the management and execution of
# data-related notifications, e.g., inform an external client if a data value is initialized and therefore available
# to read. In custom mode users have to provide a corresponding implementation of the INotificationManager interface.
# We assume that the resulting implementation follows the singleton pattern using an enum with an 'INSTANCE' constant.
# The class CamelNotificationManager.java can be used as a template for custom implementations.
notification.mode=CUSTOM
notification.manager.class=org.trade.core.notification.management.camel.CamelNotificationManager
# INotifier implementations are configured and registered through the 'notifier.properties' file

# Configure the URL at which the API of the data transformation framework (HDTApps) can be accessed
hdtApps.framework.url=http://127.0.0.1:8082